/**
 * MappingMapTocontacts.java
 *
 * This file was generated by MapForce 2012r2sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapTocontacts extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_contacts_csv;
	
		public main(com.altova.mapforce.IMFNode var1_instance_contacts_csv)
		{
			this.var1_instance_contacts_csv = var1_instance_contacts_csv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("contacts", ""), (new seq1_join(closure.var1_instance_contacts_csv)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_contacts_csv;
	
		public seq1_join(com.altova.mapforce.IMFNode var1_instance_contacts_csv)
		{
			this.var1_instance_contacts_csv = var1_instance_contacts_csv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_join closure;
			IEnumerator var2_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var4_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var5_filter_elements_nodename;
			public Enumerator(seq1_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("C:/Users/ahmadtaufik/Desktop/contacts/contacts.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Rows", closure.var1_instance_contacts_csv)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 4; return false; }
				var3_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("email", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var4_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("name", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var5_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("id", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("contact", ""), (new seq2_join(var5_filter_elements_nodename, var4_filter_elements_nodename, var3_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IEnumerable var2_filter_elements_nodename;
		com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
	
		public seq2_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IEnumerable var2_filter_elements_nodename, com.altova.mapforce.IEnumerable var3_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_filter_elements_nodename = var2_filter_elements_nodename;
			this.var3_filter_elements_nodename = var3_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			public Enumerator(seq2_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 4;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 4; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("id", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename)))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(closure.var2_filter_elements_nodename))) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("name", ""), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var2_filter_elements_nodename))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var3_filter_elements_nodename))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("email", ""), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_elements_nodename))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_contacts_csv;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_contacts_csv)
		{
			this.var1_instance_contacts_csv = var1_instance_contacts_csv;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_instance_contacts_csv))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_box.close(); var2_box = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_box.close(); var2_box = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.tablelike.Table varcontacts_csvInstance;

	public void run(String contacts_csvSourceFilename, String contacts2TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + contacts_csvSourceFilename + "...\n");
		com.altova.io.FileInput contacts_csvSource = new com.altova.io.FileInput(contacts_csvSourceFilename);
		// open target stream
		com.altova.io.FileOutput contacts2Target = new com.altova.io.FileOutput(contacts2TargetFilename);

		// run
		run(contacts_csvSource, contacts2Target);

		// close source streams
		contacts_csvSource.close();
		// close target stream
		writeTrace("Saving " + contacts2TargetFilename + "...\n");
		contacts2Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input contacts_csvSource, com.altova.io.Output contacts2Target) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.altova.text.tablelike.csv.Table contacts_csvInstanceObject = new com.altova.text.tablelike.csv.Table(com.mapforce.input1.input1_TypeInfo.binder.getTypes()[com.mapforce.input1.input1_TypeInfo._altova_ti_altova_RowsType]);
		varcontacts_csvInstance = contacts_csvInstanceObject;
		com.altova.text.tablelike.Table contacts_csvSourceObject = varcontacts_csvInstance;
			contacts_csvInstanceObject.getFormat().setAssumeFirstRowAsHeaders( true );
			contacts_csvInstanceObject.getFormat().setFieldDelimiter( ',' );
			contacts_csvInstanceObject.getFormat().setRemoveEmpty( true );
			contacts_csvInstanceObject.getFormat().setQuoteCharacter( '\"' );
		varcontacts_csvInstance.setEncoding( "UTF-8", false, false );
		varcontacts_csvInstance.parse(contacts_csvSource);
		if (runDoesCloseAll)
			contacts_csvSource.close();

		// Create the target
		org.w3c.dom.Document contacts2Doc = (contacts2Target.getType() == com.altova.io.Output.IO_DOM) ? contacts2Target.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.text.TableAsMFNodeAdapter(varcontacts_csvInstance, contacts_csvSource.getFilename()));

		com.altova.xml.MFDOMWriter.write(mapping, contacts2Doc);
		// Close the target
		XmlTreeOperations.saveDocument(contacts2Doc, contacts2Target, "UTF-8", false, false, true);

		
		if (runDoesCloseAll)
		{
			contacts_csvSource.close();
			contacts2Target.close();
		}
	}



}
